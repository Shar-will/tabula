# Task ID: 1
# Title: Initialize Chrome Extension Project with React, Vite, and Tailwind
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Set up the project repository with React 18+, Vite, Tailwind CSS, and shadcn/ui, configured for Chrome Extension development.
# Details:
Create a new Vite project with React template. Integrate Tailwind CSS and shadcn/ui. Configure Vite for Chrome Extension output. Set up project structure for extension (public, src, manifest.json). Ensure compatibility with Manifest V3. Add Framer Motion and react-dnd/@dnd-kit/core as dependencies.

# Test Strategy:
Verify project builds successfully. Confirm Tailwind and shadcn/ui styles render. Ensure dev server runs and outputs static files suitable for Chrome extension.

# Subtasks:
## 1. Initialize Vite Project with React 18+ [done]
### Dependencies: None
### Description: Create a new Vite project using the React template, ensuring React 18+ is used, and set up the initial repository structure.
### Details:
Run `npx create-vite@latest` and select the React template. Choose TypeScript if desired. Ensure React version is 18 or higher in package.json. Initialize a git repository and make the first commit. Organize the project with `src` and `public` directories.
<info added on 2025-07-29T01:34:31.010Z>
âœ… COMPLETED: Successfully initialized Vite project with React 19.1.0

What was accomplished:
- Created Vite project using React template (React 19.1.0 - exceeds React 18+ requirement)
- Installed all dependencies successfully (152 packages, 0 vulnerabilities)
- Verified dev server starts correctly and serves React app
- Updated package.json with correct project name "tabula" and version "1.0.0"
- Preserved existing Taskmaster setup and .env files

Project structure created:
- src/ directory with App.jsx, main.jsx, index.css, App.css
- public/ directory for static assets
- package.json with React 19.1.0 and Vite 7.0.4
- vite.config.js for build configuration
- eslint.config.js for linting

Test results:
- npm run dev starts successfully
- React app loads at http://localhost:5173
- All dependencies installed without errors
- Project structure matches Vite React template standards

Ready to proceed to next subtask: Integrate Tailwind CSS and shadcn/ui
</info added on 2025-07-29T01:34:31.010Z>

## 2. Integrate Tailwind CSS and shadcn/ui [done]
### Dependencies: None
### Description: Add Tailwind CSS and shadcn/ui to the project, configuring Tailwind for JIT mode and setting up base styles.
### Details:
Install Tailwind CSS and its peer dependencies. Run `npx tailwindcss init -p` to generate config files. Update `tailwind.config.js` to include all relevant file paths. Add Tailwind directives to the main CSS file. Install shadcn/ui and follow its setup instructions to ensure components and styles are available.
<info added on 2025-07-29T01:39:25.592Z>
Successfully integrated Tailwind CSS v4 and shadcn/ui with a custom color palette and theming system. Set up PostCSS and Autoprefixer, configured Tailwind and shadcn/ui design tokens, and established import aliases for cleaner imports. Added utility functions (clsx, tailwind-merge) and verified that Tailwind classes, shadcn/ui components, and theming work as expected in the development environment. Project structure now includes updated configuration files and demo usage of Tailwind and shadcn/ui in App.jsx.
</info added on 2025-07-29T01:39:25.592Z>

## 3. Configure Vite for Chrome Extension Output [done]
### Dependencies: None
### Description: Adjust Vite configuration to output static files suitable for Chrome Extension development, including correct base path and output directory.
### Details:
Set `base: './'` in `vite.config.js` to ensure relative asset paths. Configure the build output directory as `dist`. Ensure the build process copies static assets from `public` to `dist`. Prepare for multiple entry points if needed (popup, background, content scripts).

## 4. Set Up Chrome Extension Project Structure and Manifest V3 [done]
### Dependencies: None
### Description: Organize the project for Chrome Extension development, including `public`, `src`, and a Manifest V3-compliant `manifest.json`.
### Details:
Create a `public/manifest.json` file with Manifest V3 fields: name, version, permissions, background service worker, and action popup. Organize `src` for popup, background, and content scripts. Ensure static files (icons, etc.) are in `public`. Reference the correct HTML and JS files in the manifest.

## 5. Install and Configure Framer Motion and Drag-and-Drop Libraries [done]
### Dependencies: None
### Description: Add Framer Motion and react-dnd/@dnd-kit/core as dependencies, and verify their integration with the React project.
### Details:
Install Framer Motion and either react-dnd or @dnd-kit/core via npm or bun. Add a sample animated component and a basic drag-and-drop example to the project. Ensure these libraries work with the existing React and Tailwind setup.

